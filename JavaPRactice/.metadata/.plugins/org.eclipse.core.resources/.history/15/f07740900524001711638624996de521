package com.practice.sort;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;

public class SortingOrder {
	
	public static void main(String[] args){
	Order ord1 = new Order(123, "homedelivery", 1000.00);
	Order ord2 = new Order(103, "online", 34300.00);
	Order ord3 = new Order(153, "c2d", 999.00);
	Order ord4 = new Order(145, "coorporate", 23235.00);
	
	List<Order> orders = new ArrayList<Order>();
	orders.add(ord4);
	orders.add(ord2);
	orders.add(ord3);
	orders.add(ord1);
	
	System.out.println("unsorted::  "+ orders);
	Collections.sort(orders);
	
	System.out.println("natural sort order::  "+ orders);
	
	Collections.sort(orders, Collections.reverseOrder());
	System.out.println("reverse order::  "+ orders);
	
	Collections.sort(orders, new Order.OrderByAmout());
			
	System.out.println("reverse order::  "+ orders);
	
	
	}
	
}


class Order implements Comparable<Order> {

	private int orderId;
	private String orderType;
	private double orderAmt;

	public static abstract class OrderByType implements Comparator<Order> {

		@Override
		public int compare(Order o1, Order o2) {

			return o1.orderType.compareTo(o2.orderType);

		}
	}
	
	/*
     * Comparator implementation to Sort Order object based on Amount
     */
    public static class OrderByAmount implements Comparator<Order> {

        @Override
        public int compare(Order o1, Order o2) {
            return o1.orderAmt > o2.orderAmt ? 1 : (o1.orderAmt < o2.orderAmt ? -1 : 0);
        }
        
        @Override
        
        public int reversed
    }




	public Order(int orderId, String orderType, double orderAmt) {
		this.orderId = orderId;
		this.orderType = orderType;
		this.orderAmt = orderAmt;

	}

	public int getOrderId() {
		return orderId;
	}

	public void setOrderId(int orderId) {
		this.orderId = orderId;
	}

	public String getOrderType() {
		return orderType;
	}

	public void setOrderType(String orderType) {
		this.orderType = orderType;
	}

	public double getOrderAmt() {
		return orderAmt;
	}

	public void setOrderAmt(double orderAmt) {
		this.orderAmt = orderAmt;
	}

	/*
	 * Sorting on orderId is natural sorting for Order.
	 */
	@Override
	public int compareTo(Order o) {
		return this.orderId > o.orderId ? 1 : (this.orderId < o.orderId ? -1
				: 0);
	}

	@Override
	public String toString() {
		return String.valueOf(orderId);
	}

}
